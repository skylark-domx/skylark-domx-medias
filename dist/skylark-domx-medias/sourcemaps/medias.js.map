{"version":3,"sources":["medias.js"],"names":["define","skylark","langx","datax","medias","mixin","controls","media","v","undefined","currentTime","t","duration","ended","muted","paused","played","volume","load","src","play","stop","pause","this","_video","attach"],"mappings":";;;;;;;AAAAA,QACI,wBACA,sBACA,qBACD,SAASC,EAAQC,EAAMC,GAuHd,SAASC,IACZ,OAAOA,EAuEV,OApEDF,EAAMG,MAAMD,GACTE,SAAW,SAASC,EAAMC,GACtB,QAAUC,IAAND,EACA,OAAOD,EAAMD,SAEbC,EAAMD,SAAWE,GAGzBE,YAAc,SAASH,EAAMI,GACzB,QAAUF,IAANE,EACA,OAAOJ,EAAMG,YAEbH,EAAMG,YAAcC,GAI5BC,SAAW,SAASL,GAChB,OAAOA,EAAMK,UAGjBC,MAAQ,SAASN,GACb,OAAOA,EAAMM,OAGjBC,MAAQ,SAASP,GACb,OAAOA,EAAMO,OAGjBC,OAAS,SAASR,GACd,OAAOA,EAAMQ,QAGjBC,OAAS,SAAST,GACd,OAAOA,EAAMS,QAGjBC,OAAS,SAASV,EAAMC,GACpB,QAAUC,IAAND,EACA,OAAOD,EAAMU,OAEbV,EAAMU,OAAST,GAKvBU,KAAO,SAASX,EAAMY,GAIlB,OAHIA,IACAZ,EAAMY,IAAMA,GAETZ,EAAMW,QAGjBE,KAAO,SAASb,GACd,OAAOA,EAAMa,QAGfC,KAAO,SAASd,GACd,OAAOA,EAAMc,QAGfC,MAAQ,SAASf,GACfgB,KAAKC,OAAOF,WAOTrB,EAAQwB,OAAO,cAAgBrB","file":"../medias.js","sourcesContent":["define([\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-data\"\r\n], function(skylark,langx,datax) {\r\n      /*\r\n        var TEST_VID  = (function () {\r\n            const video = document.createElement('video');\r\n            const track = document.createElement('track');\r\n            track.kind = 'captions';\r\n            track.srclang = 'en';\r\n            track.label = 'English';\r\n            video.appendChild(track);\r\n            return video;\r\n          })();\r\n\r\n        medias.isSupported = function () {\r\n            try {\r\n                TEST_VID.volume = 0.5;\r\n            } catch (e) {\r\n                return false;\r\n            }\r\n            return !!TEST_VID && TEST_VID.canPlayType);\r\n        };\r\n\r\n        medias.canPlayType = function (type) {\r\n            return TEST_VID.canPlayType(type);\r\n        };\r\n\r\n        medias.canControlVolume = function () {\r\n            try {\r\n                const volume = TEST_VID.volume;\r\n                TEST_VID.volume = volume / 2 + 0.1;\r\n                return volume !== TEST_VID.volume;\r\n            } catch (e) {\r\n                return false;\r\n            }\r\n        };\r\n\r\n        medias.canMuteVolume = function () {\r\n            try {\r\n                const muted = TEST_VID.muted;\r\n                TEST_VID.muted = !muted;\r\n                if TEST_VID.muted) {\r\n                    Dom.setAttributeTEST_VID, 'muted', 'muted');\r\n                } else {\r\n                    Dom.removeAttributeTEST_VID, 'muted', 'muted');\r\n                }\r\n                return muted !== TEST_VID.muted;\r\n            } catch (e) {\r\n                return false;\r\n            }\r\n        };\r\n        \r\n        medias.canControlPlaybackRate = function () {\r\n            if (browser.IS_ANDROID && browser.IS_CHROME && browser.CHROME_VERSION < 58) {\r\n                return false;\r\n            }\r\n            try {\r\n                const playbackRate = TEST_VID.playbackRate;\r\n                TEST_VID.playbackRate = playbackRate / 2 + 0.1;\r\n                return playbackRate !== TEST_VID.playbackRate;\r\n            } catch (e) {\r\n                return false;\r\n            }\r\n        };\r\n        medias.canOverrideAttributes = function () {\r\n            try {\r\n                const noop = () => {\r\n                };\r\n                Object.defineProperty(document.createElement('video'), 'src', {\r\n                    get: noop,\r\n                    set: noop\r\n                });\r\n                Object.defineProperty(document.createElement('audio'), 'src', {\r\n                    get: noop,\r\n                    set: noop\r\n                });\r\n                Object.defineProperty(document.createElement('video'), 'innerHTML', {\r\n                    get: noop,\r\n                    set: noop\r\n                });\r\n                Object.defineProperty(document.createElement('audio'), 'innerHTML', {\r\n                    get: noop,\r\n                    set: noop\r\n                });\r\n            } catch (e) {\r\n                return false;\r\n            }\r\n            return true;\r\n        };\r\n        medias.supportsNativeTextTracks = function () {\r\n            return browser.IS_ANY_SAFARI || browser.IS_IOS && browser.IS_CHROME;\r\n        };\r\n        medias.supportsNativeVideoTracks = function () {\r\n            return !!TEST_VID && TEST_VID.videoTracks;\r\n        };\r\n        medias.supportsNativeAudioTracks = function () {\r\n            return !!TEST_VID && TEST_VID.audioTracks;\r\n        };\r\n\r\n\r\n        Html5.resetMediaElement = function (el) {\r\n            if (!el) {\r\n                return;\r\n            }\r\n            const sources = el.querySelectorAll('source');\r\n            let i = sources.length;\r\n            while (i--) {\r\n                el.removeChild(sources[i]);\r\n            }\r\n            el.removeAttribute('src');\r\n            if (typeof el.load === 'function') {\r\n                (function () {\r\n                    try {\r\n                        el.load();\r\n                    } catch (e) {\r\n                    }\r\n                }());\r\n            }\r\n        };\r\n\r\n      */\r\n            function medias() {\r\n         return medias;\r\n      }\r\n      //events:play,pause,loadedmetadata,timeupdate,volumechange,\r\n     langx.mixin(medias,{\r\n        controls : function(media,v) {\r\n            if (v === undefined) {\r\n                return media.controls;\r\n            } else {\r\n                media.controls = v;\r\n            }\r\n        },\r\n        currentTime : function(media,t) {\r\n            if (t === undefined) {\r\n                return media.currentTime;\r\n            } else {\r\n                media.currentTime = t;\r\n            }\r\n        },\r\n\r\n        duration : function(media) {\r\n            return media.duration;\r\n        },\r\n\r\n        ended : function(media) {\r\n            return media.ended;\r\n        },\r\n\r\n        muted : function(media) {\r\n            return media.muted;\r\n        },\r\n\r\n        paused : function(media) {\r\n            return media.paused;\r\n        },\r\n\r\n        played : function(media) {\r\n            return media.played;\r\n        },\r\n\r\n        volume : function(media,v) {\r\n            if (v === undefined) {\r\n                return media.volume;\r\n            } else {\r\n                media.volume = v;\r\n            }\r\n        },\r\n\r\n\r\n        load : function(media,src) {\r\n            if (src) {\r\n                media.src = src;\r\n            }\r\n            return media.load();\r\n        },\r\n\r\n        play : function(media) {\r\n          return media.play();\r\n        },\r\n\r\n        stop : function(media) {\r\n          return media.stop();\r\n        },\r\n\r\n        pause : function(media) {\r\n          this._video.pause();      \r\n        }\r\n\r\n\r\n     });\r\n\r\n\r\n      return skylark.attach(\"domx.medias\" , medias);\r\n  \r\n});\r\n"]}